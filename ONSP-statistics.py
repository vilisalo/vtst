################ STATISTICAL ANALYSIS OF CONSP DATA ###################

import pandas as pd
from scipy import stats
import numpy as np
from statsmodels.formula.api import ols
import statsmodels.api as sm
from matplotlib import pyplot as plt
pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)



##### RATE COEFFICIENT DATA SETS #####
MC_A_rate = np.array([0.000098,	0.00048,	0.00076,	0.00082,	0.00091,	0.0013,	0.0022,	0.012,	0.04,	0.057,	0.16,	0.67]).T
MC_A_kappa = np.array([34.3,	31,	37.4,	19.1,	12.9,	43.9,	31.3,	45.3,	43.8,	34.8,	10.9,	30.5]).T
MC_A_entropy = np.array([0.0026357146854537,	9.51371290872713E-05,	0.000871061752743986,	0.00533204126596129,	0.000612422858244921,	0.00250634933643553,	0.00226635540810404,	0.00144084371793728,	0.0125446626598157,	0.00758387305160655,	0.00250634933643553,	0.0131921560637521]).T
MC_A_enthalpy = np.array([1.73288837598719E-16,	2.74164930530125E-14,	3.61672406988632E-15,	1.31361202026651E-15,	1.95612144468114E-14,	1.84112468711579E-15,	5.06910706420199E-15,	3.24578646972227E-14,	1.17888565438158E-14,	3.84262487060667E-14,	9.49469068553661E-13,	2.4604609165415E-13]).T

MC_B_rate = np.array([0.0000032,	0.000027,	0.00003,	0.000039,	0.000098,	0.00027,	0.00034,	0.00064,	0.0013,	0.0014,	0.0015,	0.0023,	0.0044,	0.016,	4.60E-02]).T
MC_B_kappa = np.array([44.6,	44.7,	25,	55.2,	28.5,	26.1,	41.6,	31.6,	33.7,	27.6,	28.4,	31,	48.2,	45.1,	40]).T
MC_B_entropy = np.array([0.00030273057552803,	0.000149644645240987,	0.00137012466345073,	0.000100047636864477,	0.000712232474841197,	0.00144084371793728,	0.000247530724818543,	0.00130287662015382,	0.00117812047636475,	0.0015152129400333,	0.000748994390409178,	0.000452804393969417,	6.04837768594545E-05,	0.0015152129400333,	0.000677275]).T
MC_B_enthalpy = np.array([3.79313408101353E-17,	6.68705566991387E-16,	1.46373529389825E-16,	1.10958114971354E-15,	7.91667802797301E-16,	1.10958114971354E-15,	5.06910706420199E-15,	2.58047281937897E-15,	5.06910706420199E-15,	5.06910706420199E-15,	1.17888565438158E-14,	2.74164930530125E-14,	2.4604609165415E-13,	3.84262487060667E-14,	2.91289E-13]).T


##### ENTHALPY OF ACTIVATION DATA SETS #####


"""
In the datasets below, the data is ordered by the H-shift reaction type, and then secondarily by the atom (C),O,N,S,P. So in A_ datasets,
the first four datapoints are 1,5 H-shifts of O, N, S, and P, next four 1,6 H-shift of O, N, S, P, etc.
"""
A_dE = np.array([23.1449766950679,	21.1054720435965,	22.6395025077868,	21.7885432005091,	24.6186640113123,	26.3429100236806,	24.4033870086652,	24.8297034456237,	23.1262248436054,	24.2485397503248,	24.2123450311707,	24.459]).T
A_dEZ = np.array ([19.79659118,	18.00933887,	19.26664101,	18.30022067,	20.93958,	22.65817655,	20.45384411,	20.77787721,	19.56323313,	20.87065441,	20.54204677,	20.77905692]).T
A_dH = np.array([19.2,	17.4,	18.6,	16.7,	20.2,	21.9,	19.8,	19,	18.7,	20,	20.6,	18.8]).T
A_BDE = np.array([97.0564144423317,	92.9317977853298,	95.1224317043278,	96.5481321523665,	99.6906972243153,	98.8002619533163,	96.9798583443466,	97.284200209363,	98.7255883823265,	98.5875364023183,	98.8379124933639,	98.83226491]).T
A_EP = np.array([36.4356089810742,	34.1295577797404,	36.4356089810742,	35.2825833804073,	36.4356089810742,	34.1295577797404,	36.4356089810742,	35.2825833804073,	36.4356089810742,	34.1295577797404,	36.4356089810742,	35.28]).T
A_localEP = np.array([20.7544608120043,	19.8320403314708,	20.5238556918709,	19.370830091204,	20.7544608120043,	19.8320403314708,	20.5238556918709,	19.370830091204,	20.7544608120043,	19.8320403314708,	20.5238556918709,	19.37]).T
A_SD_O = np.array([0.39178,	0.36251,	0.34579,	0.3291,	0.42181,	0.40433,	0.40209,	0.39238,	0.40969,	0.38453,	0.40098,	0.37992]).T
A_SD_C = np.array([0.44014,	0.38543,	0.43518,	0.45121,	0.52622,	0.5405,	0.5305,	0.53487,	0.51904,	0.53453,	0.52651,	0.53234]).T
A_NCI_tot = np.array([0.051996227568,	0.00332283024,	0.009111510088,	0.0065595245562,	0.00615199871,	0.00826408756,	0.00143539032,	0.00125098358,	0.03026739822,	0.0427632614,	0.02847602426,	0.063903304]).T
A_NCI_signed = np.array([0.051976284432,	0.00332283024,	0.008796977912,	0.0065594974438,	0.00580622855,	0.00703625516,	0.00143539032,	0.00125098358,	0.02717004658,	0.0387771002,	0.02480051974,	0.047848108]).T


B_dE = np.array([24.1736754166189,	25.907814735875,	26.4417226108911,	22.8038634301611,	21.779045224284,	21.9699811527733,	23.869450895793,	24.8555116357887,	25.3238153273956,	23.8339025109222,	23.0130203374773,	24.0197148284284,	24.0673546841885,	25.6300679573346,	25.4741395009357]).T
B_dEZ = np.array([20.71672645,	22.4301586,	23.39014697,	19.16556813,	18.14639311,	18.64355594,	20.40120865,	21.19023219,	21.90138187,	20.19811536,	19.50461752,	20.54331434,	20.4566679,	22.11100125,	22.08873096]).T
B_dH = np.array([19.9,	21.6,	22.4,	18.3,	17.1,	17.2,	19.5,	20.4,	20.7,	19.5,	18.5,	19.5,	19,	20.6,	20.4]).T
B_hardness = np.array([]).T
B_BDE = np.array([98.5756137313128,	98.541728245327,	98.1884406783272,	98.7255883823265,	98.6051066543096,	98.2141685473336,	98.5875364023183,	98.6138917803231,	98.2110310023415,	98.8379124933639,	98.6584449193176,	98.2700168483709,	98.8322649123782,	98.6383646313683,	98.2003633493328]).T
B_EP = np.array([1.48193627632065,	1.49618853398826,	1.51581240894306,	1.59097409950104,	1.58574972218755,	1.56842946934624,	1.54343050857918,	1.5280402542278,	1.55508272847559,	1.68842717568663,	1.69949928428968,	1.62077604267929,	1.59874780581456,	1.64414034370898,	1.61450312361919]).T
B_localEP = np.array([34.6951148700019,	34.6951148700019,	34.6951148700019,	36.4586692326409,	36.4586692326409,	36.4586692326409,	34.094251766873,	34.094251766873,	34.094251766873,	36.4494560899642,	36.4494560899642,	36.4494560899642,	35.2382239454013,	35.2382239454013,	35.23822395
]).T
B_SD_O = np.array([0.38313,	0.38748,	0.38367,	0.41027,	0.41685,	0.40925,	0.38436,	0.38748,	0.38474,	0.40058,	0.39529,	0.39486,	0.3799,	0.38989,	0.39486]).T
B_SD_C = np.array([0.53163,	0.5303,	0.53319,	0.51679,	0.50879,	0.51449,	0.53322,	0.5303,	0.53608,	0.52496,	0.52154,	0.51965,	0.53046,	0.52514,	0.51965]).T
B_NCI_tot = np.array([0.04496545695,	0.04118272384,	0.0752820524,	0.03013885479,	0.01764826355,	0.0321920196,	0.04285058056,	0.0271806097,	0.03970066155,	0.03091996225,	0.03750274914,	0.0554250689,	0.06509181893,	0.05532522885,	0.0692726764]).T
B_NCI_signed = np.array([0.03592162625,	0.02807177216,	0.0452655916,	0.02685762601,	0.01612573165,	0.0216037854,	0.03889402664,	0.0250182777,	0.02892136005,	0.02741802475,	0.02551079586,	0.0348232279,	0.04874750107,	0.03669448635,	0.0449769744]).T


#### PANDAS DATAFRAMES ####
A_df = pd.DataFrame({"rate":MC_A_rate, "kappa":MC_A_kappa, "entropy":MC_A_entropy, "enthalpy":MC_A_enthalpy, "enthalpy_entropy":MC_A_entropy*MC_A_enthalpy})
B_df = pd.DataFrame({"rate":MC_B_rate, "kappa":MC_B_kappa, "entropy":MC_B_entropy, "enthalpy":MC_B_enthalpy, "enthalpy_entropy":MC_B_entropy*MC_B_enthalpy})

A_dH_df = pd.DataFrame({"E":A_dE,"E+ZPE":A_dEZ,"H":A_dH,"BDE":A_BDE,"EP":A_EP,"localEP":A_localEP,"SD_O":A_SD_O, "SD_C":A_SD_C,"A_NCI_tot":A_NCI_tot,"A_NCI_signed":A_NCI_signed})

B_dH_df = pd.DataFrame({"E":B_dE,"E+ZPE":B_dEZ,"H":B_dH,"BDE":B_BDE,"EP":B_EP,"localEP":B_localEP,"SD_O":B_SD_O, "SD_C":B_SD_C,"B_NCI_tot":B_NCI_tot,"B_NCI_signed":B_NCI_signed})

#### PEARSON COVARIANCE MATRICES ####
A_pearson = A_df.corr().round(2)
B_pearson = B_df.corr().round(2)
A_dH_pearson = A_dH_df.corr().round(2)
B_dH_pearson = B_dH_df.corr().round(2)


#### SPEARMAN COVARIANCE MATRICES ####
A_spearman = A_df.corr(method="spearman").round(2)
B_spearman = B_df.corr(method="spearman").round(2)
A_dH_spearman = A_dH_df.corr(method="spearman").round(2)
B_dH_spearman = B_dH_df.corr(method="spearman").round(2)
